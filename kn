#!/usr/bin/env node
var spawn = require('child_process').spawn;
var Termoil = require('termoil');
var kubernodes = new Termoil;
    kubernodes.name('KuberNodes');
    kubernodes.instructions('kn <project> [options]');
    kubernodes.addVersion(new Termoil.Version('1.0', true));
    kubernodes.addOption(new Termoil.Option('0', 'project', null, 'Project Name', 'default', function(val){ return val.toLowerCase(); }));
    kubernodes.addOption(new Termoil.Option(['-r', '--repo'], 'repo', new Termoil.Option.Type('value'), 'Docker Repository/Organization'));
    kubernodes.addOption(new Termoil.Option('1', 'cmd', null, 'Command', 'kubectl', function(val){ return val.toLowerCase(); }));
    kubernodes.addOption(new Termoil.Option('2', 'cmd', null, 'Command', 'kubectl', function(val){ return val.toLowerCase(); }));
    kubernodes.on('parsed', function(){
        var project     = this.get('project'); //grab positional argument for project
        var repo        = this.get('repo') + '/' || process.env.KUBERNODES_REPO + '/' || ''; //check for optional repo, else: use env var
        var cmd         = this.get('cmd');
        var remainder   = this.get('_remainder') || [];
        var docker_flags = {};
        if( typeof process.stdin.isTTY === "undefined" ){
            docker_flags.i = true;
        }
        if( cmd == 'bq' ){
            if( remainder[remainder.length-1] == 'shell' ){
                docker_flags.i = true;
                docker_flags.t = true;
            }
        }
        if( cmd == 'kubectl' && (remainder.indexOf('exec') > -1 || remainder.indexOf('logs') > -1) ){
            docker_flags.i = true;
            docker_flags.t = true;
            if( remainder[remainder.length-1] == 'bash' || remainder[remainder.length-1] == 'sh' ){
                var term = remainder.pop();
                remainder.push('--');
                remainder.push('/bin/bash');
                remainder.push('-c');
                remainder.push('export COLUMNS=' + process.stdout.columns + ' && export LINES=' + process.stdout.rows + ' && ' + term); 
            }
        }
        var args = ['run'];
        if( Object.keys(docker_flags).length ){
            args.push('-' + Object.keys(docker_flags).join(''));
        }
        args.push(repo + project + 'kube');
        args.push(cmd);
        args = args.concat(remainder);
        var docker = spawn('docker', args,
            {
                shell: true,
                stdio: 'inherit'
            }
        );
    }).parse(Termoil.Skip(process.argv, 2));
